<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

// Object Properties
vx = 0;                     // Default horizontal velocity
vy = 0;                     // Default vertical velocity
ax = 0;                     // Default horizontal acceleration
ay = 0;                     // Default vertical acceleration
timer = 0;
wall_time = 25;
jspd = 17;

// Flags
jmpd = false;               // Default jump flag
key_down = 0;
keyCount = 0;
hasSpear = false;
inTar = false;

// Contraints
vx_max      = 6.5;            // Maximum horizontal speed
vy_max      = 17;           // Maximum vertical air speed
vy_max_wall = .1 * vy_max;  // Maximum vertical wall speed

// Forces
grav        = 1;            // Acceleration due to gravity
grav_wall   = .1;           // Acceleration due to gravity on walls
run_force   = 1.2;           // Acceleration due to running
friction_ground = .8;
friction_air = .06 ;

// Sprite Control
anim_idle = spr_player_idle;       // Default idle animation
anim_run = spr_player_run;         // Default run animation
anim_jump = spr_player_jump;       // Default jump animation
anim_wall = spr_player_wall;       // Default wall animation
anim_tar = spr_player_tar;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivation of all outside view
instance_deactivate_object(template_enemy);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player movement/physics

//Limit player to room boundaries
x = clamp(x, 0, room_width);
y = clamp(y, 0 ,room_height);

// Get player's input

var key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
var key_left = keyboard_check(vk_left) || keyboard_check(ord("A"));
var key_jump = keyboard_check(vk_up) || keyboard_check(vk_space) || keyboard_check(ord("W"));
key_down = keyboard_check(vk_down) || keyboard_check(ord("S"));
var jump_released = keyboard_check_released(vk_up) || keyboard_check_released(vk_space) || keyboard_check_released(ord("W"));

// Get player's status

var on_ground = place_meeting(x, y+1, template_wall);
on_wall = !key_down &amp;&amp; (place_meeting(x+1, y, template_wall) || place_meeting(x-1, y, template_wall));
var on_left = place_meeting(x-1, y, template_wall);
var on_right = place_meeting(x+1, y, template_wall);
var in_tar = place_meeting(x, y, obj_tar)

if(in_tar)                                                  // TAR LOGIC
{
    ay = 0;                                                     // Set vertical speed to slowly sink
    vy = .5;                                                     
    ax = 0;                                                     // Eliminate all other movement
    vx = 0;
}

else if (on_ground)                                         // GROUND LOGIC
{
    vy = 0;                                                     // Set vertical speed to 0
    
    ay = 0;                                                     // Set vertical acceleration to 0
                                                                
                                                                // GROUND JUMPING
                                                                
    if (key_jump &amp;&amp; !jmpd)                                          // If trying to jump, and hasn't jumped
    {    
        vy = -jspd;                                                     // Jump!
        
        if (on_wall)
        {
            x += on_left;
        }
        
                                                      
        
        
        audio_play_sound(snd_player_jump, 0, false);                    // Play jump sound
                                                      
        jmpd = true;                                                    // Disable Jumping
    }
    else if (!key_jump &amp;&amp; jmpd)                                     // If not trying to jump and has jumped
    {
        jmpd = false;                                                   // Enable Jumping
    }
                                                                
                                                                // GROUND MOVEMENT
    
    else if (!key_right &amp;&amp; !key_left || key_left &amp;&amp; key_right)      // If pressing both left and right keys or no keys
    {
        ax = friction_ground * -sign(vx);                           // Apply friction
        
        if (abs(ax) &gt; abs(vx))                                          // Check threshold
        {
            ax = 0;                                                     // Stop acceleration                                                   
            
            vx = 0;                                                     // Stop movement
        }
        
        if (abs(vx) &gt; vx_max)                                           // If at max speed
        {
                ax = 0;                                                     // Stop acceleration        
                
                vx = vx_max * sign(vx);                                     // Maintain max speed
        }
    }    
    else                                                            // If pressing one key
    {
        if (key_right)                                                  // If only pressing right
        {
            if (vx &lt; vx_max)                                                // If not at max speed
            {
                ax = run_force + friction_ground * -sign(vx);                   // Increase speed
            }
            else                                                            // If at max speed
            {
                ax = 0;                                                         // Stop acceleration        
                
                vx = vx_max;                                                    // Maintain max speed
            }
        }
        else if (key_left)                                              // If only pressing left 
        {
            if (vx &gt; -vx_max)                                               // If not at max speed
            {
                ax = friction_ground * -sign(vx) - run_force;                   // Increase speed
            }
            else                                                            // If at max speed
            {
                ax = 0;                                                         // Stop acceleration        
                
                vx = -vx_max;                                                   // Maintain max speed
            }
        }
    } 
}
else if (on_wall)                                           // WALL LOGIC
{
    vx = 0;                                                     // Set horizontal speed to 0
    
    ax = 0;                                                     // Set horizontal acceleration to 0   
                                                               
                                                                // GRAVITY 
    
    if (vy &lt; vy_max_wall)                                           // If not at terminal wall velocity
    {
        if (vy &gt; 0)                                                     // If sliding down wall
        {
            ay = grav + friction_ground * -sign(vy);                            // Fall slowly
        }
        else                                                            // If sliding up wall
        {
            ay = grav + friction_air * -sign(vy);                               // Fall faster
        }   
    }
    else                                                            // If at terminal wall velocity
    {
        ay = 0;
    
        vy = vy_max_wall;                                                   // Maintain terminal velocity
    }
    
                                                                // WALL JUMPING
    
    if (on_right)                                                   // If on right wall
    {
        if (key_jump &amp;&amp; !jmpd)                                          // If trying to jump, and hasn't jumped
        {           
            vx = -jspd * .7;                                            // Jump diagonally to the left
            
            vy = -jspd * .7;
         
            jmpd = true;                                                    // Disable Jumping            
        }
        else if (!key_jump &amp;&amp; jmpd)                                     // If not trying to jump and has jumped
        {
            jmpd = false;                                                   // Enable Jumping
        }
        if (!key_right)
        {
            if (timer &lt; wall_time) timer++;
            
            else 
            {
                ax = friction_air - run_force;
                
                jmpd = true;
            }
        }
        else timer = 0;
    }
    else if (on_left)                                               // If on left wall
    {
        if (key_jump &amp;&amp; !jmpd)                                          // If trying to jump, and hasn't jumped
        {           
            vx = jspd * .7;                                              // Jump diagonally to the right
            
            vy = -jspd * .7;
            
            jmpd = true;                                                    // Disable Jumping     
        }
        else if (!key_jump &amp;&amp; jmpd)                                     // If not trying to jump and has jumped
        {
            jmpd = false;                                                   // Enable Jumping
        }
        if (!key_left)
        {
            if (timer &lt; wall_time) timer++;
            
            else 
            {
                ax = run_force - friction_air;
                
                jmpd = true;
            }
        }
        else timer = 0;
    }
}
else                                                        // AIR LOGIC
{        
    timer = 0;
    
    if (vy &lt; vy_max)                                              // If not at terminal velocity
    {
        ay = grav + friction_air * -sign(vy);                                   // Apply gravity 
    }
    else 
    {
        ay = 0;
        
        vy = vy_max;
    }

    if (jump_released &amp;&amp; vy &lt; -4)                               // Variable Jumping
    {
        vy = -4;                                                    // Reduce jump height     
    }                                                      

    else if (!key_right &amp;&amp; !key_left || key_left &amp;&amp; key_right)      // If pressing both left and right keys or no keys
    {
        ax = friction_air * -sign(vx);                              // Apply friction
        
        if (abs(ax) &gt; abs(vx))                                          // Check threshold
        {
            ax = 0;                                                         // Stop acceleration                                                   
            
            vx = 0;                                                         // Stop movement
        }
        
        if (abs(vx) &gt; vx_max)                                           // If at max speed
        {
                ax = 0;                                                     // Stop acceleration        
                
                vx = vx_max * sign(vx);                                     // Maintain max speed
        }
    }     
    else                                                            // If pressing one key
    {
        if (key_right)                                                  // If only pressing right
        {
            if (vx &lt; vx_max)                                                 // If not at max speed
            {
                ax = run_force + friction_air * -sign(vx);                      // Increase speed
            }
            else                                                            // If at max speed
            {
                ax = 0;                                                         // Stop acceleration        
                
                vx = vx_max;                                                    // Maintain max speed
            }
        }
        else if (key_left)                                              // If only pressing left 
        {
            if (vx &gt; -vx_max)                                               // If not at max speed
            {
                ax = friction_air * -sign(vx) - run_force;                                  // Increase speed
            }
            else                                                            // If at max speed
            {
                ax = 0;                                                         // Stop acceleration        
                
                vx = -vx_max;                                                    // Maintain max speed
            }
        }
    }
}  

// Set horizontal speed
vx += ax;

// Horizontal collisions
if (place_meeting(x + vx, y, template_wall))
{
    // sign(x) = x * -1
    while(!place_meeting(x + sign(vx), y, template_wall))
    {
        // Move object 1 pixel at a time until it hits a collision
        x += sign(vx)
    }
    vx = 0; // Stop at walls
    
    ax = 0; // Stop acceleration
}

// Move horizontally
x += vx;

// Set vertical speed
vy += ay;

// Vertical collisions
if (place_meeting(x, y + vy, template_wall))
{
    // sign(x) = x * -1
    while(!place_meeting(x, y + sign(vy), template_wall))
    {
        // Move object 1 pixel at a time until it hits a collision
        y += sign(vy)
    }
    vy = 0; // Stop at ground
    
    ay = 0; // Stop acceleration
}

//Move vertically
y += vy;

// Fix stuck in platform

while(place_meeting(x, y, template_wall))
{
    // Move object 1 pixel at a time until it hits a collision
    y -= 1;
}
scr_sprite_direction();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprite animation/changes
if(!hasSpear)
{
    // Sprite Control
    anim_idle = spr_player_idle;       // Default idle animation
    anim_run = spr_player_run;         // Default run animation
    anim_jump = spr_player_jump;       // Default jump animation
    anim_wall = spr_player_wall;       // Default wall animation
    anim_tar = spr_player_tar;
    window_set_cursor(cr_default);
    cursor_sprite = -1;
}
else
{
    anim_idle = spr_player_spear;
    anim_run = spr_player_spear;
    anim_jump = spr_player_jump;       // Default jump animation
    anim_wall = spr_player_wall;       // Default wall animation
    anim_tar = spr_player_tar;
    window_set_cursor(cr_none);
    cursor_sprite = spr_spear_cursor;
}

if(inTar)
{
    sprite_index = anim_tar;
    image_speed = .1;
}
if(on_wall &amp;&amp; !on_ground)
{
    sprite_index = anim_wall;
    image_speed = 0;
}
else if(yprevious != y)
{
    sprite_index = anim_jump;
    image_speed = 0;
    image_index = y &gt; yprevious;
}
else
{
    if (xprevious != x)
    {
        sprite_index = anim_run;
        image_speed = 0.3
    }
    else
    {
        sprite_index = anim_idle;
        image_speed = 0.1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Projectile Control
if (hasSpear)
{
    if (mouse_check_button(mb_left))
    {
        instance_create(x, y, obj_proj_aim);
    }
    
    
    if (mouse_check_button_released(mb_left))
    {
        instance_create(x, y, obj_projectile);
        hasSpear = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance loading


instance_activate_region(view_xview[0] - 64, view_yview - 64, view_wview[0] + 128, view_hview + 128, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
