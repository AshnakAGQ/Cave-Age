<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Enemy variables

dir = -1;   // Enemy defaults to moving left
spd = 3;    // Default horizontal speed
grav = 1;   // Gravity work the same for enemies
hspd = 0;   // Default stopped
vspd = 0;   // Default stopped

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enemy movement

hspd = dir * spd;     //spd * -1 = left;
vspd += grav;   // Fall

// Horizontal collisions
if (place_meeting(x + hspd, y, obj_ground))
{
    // sign(x) = x * -1
    while(!place_meeting(x + sign(hspd), y, obj_ground))
    {
        // Move object 1 pixel at a time until it hits a collision
        x += sign(hspd)
    }
    hspd = 0; // Stop at walls
    
    // Turn object around at walls
    dir *= -1;
    image_xscale *= -1;
}

// Move horizontally
x += hspd;



// Vertical collisions
if (place_meeting(x, y + vspd, obj_ground) || vspd &gt;= 0 &amp;&amp; !place_meeting(x, y, obj_platform) &amp;&amp; place_meeting(x, y + vspd, obj_platform))
{
    // sign(x) = x * -1
    while(!place_meeting(x, y + sign(vspd), obj_ground) &amp;&amp; !place_meeting(x, y + sign(vspd), obj_platform))
    {
        // Move object 1 pixel at a time until it hits a collision
        y += sign(vspd)
    }
    vspd = 0; // Stop at ground
}

//Move vertically
y += vspd;

// Player collisions

if(place_meeting(x,y,obj_player))
{
    if(obj_player.y &lt; y) // Player collides with top of enemy
    {
        with(obj_player)
        {
            vspd = -jspd; // Make player jump
        }
        
        instance_destroy(); // Kill enemy object (instance)
    }
    else // Player collides with enemy, but not the top
    {
        scr_death();    // Will contain death functionality
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
