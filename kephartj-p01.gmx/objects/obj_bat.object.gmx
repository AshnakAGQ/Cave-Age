<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>template_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Enemy variables

image_speed = .1;
dir = -1;   // Enemy defaults to moving left
spd = 3;    // Default horizontal speed
vx = 0;   // Default stopped
vy = 0;   // Default stopped
range = 256;
attacking = false;
killable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attacking = false;
image_speed = .1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var target = point_direction(x, y, obj_player.x, obj_player.y);
vy = -spd * sin(degtorad(target));
vx = spd * cos(degtorad(target));
alarm[1] = 120;
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!attacking) 
{
    if (point_distance(x, y, obj_player.x, obj_player.y) &lt;= range)
    {
        attacking = true;
        alarm[0] = 60;
        vx = 0;
        vy = 0;
        image_speed = .3;
    }
    else 
    {
        vx = dir * spd;     //spd * -1 = left;
        vy = 0;
    }
}
// Horizontal collisions
if (place_meeting(x + vx, y, obj_ground))
{
    // sign(x) = x * -1
    while(!place_meeting(x + sign(vx), y, obj_ground))
    {
        // Move object 1 pixel at a time until it hits a collision
        x += sign(vx);
    }
    vx = 0; // Stop at walls
    
    // Turn object around at walls
    dir *= -1;
}

// Move horizontally
x += vx;

// Vertical collisions
if (place_meeting(x, y + vy, obj_ground))
{
    // sign(x) = x * -1
    while(!place_meeting(x, y + sign(vy), obj_ground))
    {
        // Move object 1 pixel at a time until it hits a collision
        y += sign(vy);
    }
    vy = 0; // Stop at ground
}

//Move vertically
y += vy;

// Player collisions

if(place_meeting(x,y,obj_player))
{
    if(killable &amp;&amp; obj_player.bbox_bottom &lt; y) // Player collides with top of enemy
    {
        with(obj_player)
        {
            vy = -jspd; // Make player jump
            
            audio_play_sound(snd_enemy_die, 0, false); // Enemy death sound
        }
        
        instance_destroy(); // Kill enemy object (instance)
    }
    else // Player collides with enemy, but not the top
    {
        scr_death();    // Will contain death functionality
    }  
}

scr_sprite_direction();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
